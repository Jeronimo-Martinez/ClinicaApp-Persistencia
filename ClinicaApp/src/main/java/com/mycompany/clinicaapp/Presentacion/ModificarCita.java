/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.clinicaapp.Presentacion;

import com.mycompany.clinicaapp.Interfaces.IGestorCita;
import com.mycompany.clinicaapp.Interfaces.IMedicoService;
import com.mycompany.clinicaapp.Modelos.Cita;
import com.mycompany.clinicaapp.Modelos.Medico;
import java.awt.Component;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JOptionPane;

/**
 *
 * @author jmart
 */
public class ModificarCita extends javax.swing.JFrame {

    private IGestorCita gestorCita;
    private IMedicoService gestorMedico;
    private Cita cita;
    private PanelCitasPaciente ownerLista; // ventana que debe refrescarse tras el cambio

    /**
     * Creates new form ModificarCita
     */
    public ModificarCita() {
        initComponents();
    }
    // nuevo constructor que recibe optional owner para refrescar la lista tras modificar
    public ModificarCita(IGestorCita gestorCita, IMedicoService gestorMedico, Cita cita, PanelCitasPaciente owner) {
         this();
         this.gestorCita = gestorCita;
         this.gestorMedico = gestorMedico;
         this.cita = cita;
         this.ownerLista = owner;
 
         // poblar combo con médicos de la misma especialidad que el médico actual
         DefaultComboBoxModel<Medico> model = new DefaultComboBoxModel<>();
         if (gestorMedico != null && cita != null && cita.getMedico() != null && cita.getMedico().getEspecialidad() != null) {
             String especialidadActual = cita.getMedico().getEspecialidad().getNombre();
             List<Medico> lista = gestorMedico.listarMedicosEspecialidad(especialidadActual); // usa la interfaz para filtrar por especialidad
             System.out.println(lista);
             for (Medico m : lista) {
                 model.addElement(m);
             }
         }
         jComboBox1.setModel(model);

        // mostrar nombre del médico en el combobox
        jComboBox1.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof Medico) {
                    setText(((Medico) value).getNombre());
                }
                return this;
            }
        });

        // preseleccionar el médico actual si está en la lista
        if (cita != null && cita.getMedico() != null) {
            for (int i = 0; i < jComboBox1.getItemCount(); i++) {
                Medico m = jComboBox1.getItemAt(i);
                if (m != null && m.getCedula().equals(cita.getMedico().getCedula())) {
                    jComboBox1.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        popupMenu1 = new java.awt.PopupMenu();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        botonCancelar = new javax.swing.JButton();
        botonAplicar = new javax.swing.JButton();
        textoFecha = new javax.swing.JTextField();

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Modificar Cita");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Reprogramar: ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Cambiar Doctor : ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<Medico>());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        botonAplicar.setText("Aplicar");
        botonAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAplicarActionPerformed(evt);
            }
        });

        textoFecha.setText("dd/mm/yyyy");
        textoFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoFechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(458, 458, 458)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, 222, Short.MAX_VALUE)
                            .addComponent(textoFecha, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(botonAplicar)
                .addGap(18, 18, 18)
                .addComponent(botonCancelar)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonCancelar)
                    .addComponent(botonAplicar))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.dispose();  
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAplicarActionPerformed
        // Guardar cambio de médico y cerrar
        String fechastr = textoFecha.getText().trim();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate fechaIngresada;
    try {
        fechaIngresada = LocalDate.parse(fechastr, formato);
        LocalDate hoy = LocalDate.now();

        // validar fecha posterior a la actual
        if (!fechaIngresada.isAfter(hoy)) {
            JOptionPane.showMessageDialog(null, 
                "La fecha debe ser posterior a la actual.",
                "Fecha no válida",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        //return fechaIngresada;

    } catch (DateTimeParseException e) {
        // el formato no es valido
        JOptionPane.showMessageDialog(null, 
            "Formato de fecha inválido. Usa el formato dd/MM/yyyy.\nEjemplo: 27/10/2025",
            "Error de formato",
            JOptionPane.ERROR_MESSAGE);
        return;
    }

        Medico seleccionado = (Medico) jComboBox1.getSelectedItem();
        ///System.out.println(seleccionado.getEspecialidad());
        if (cita == null || gestorCita == null) {
            this.dispose();
            return;
        }

        // si es el mismo médico, sólo cerrar
        if (cita.getMedico() != null && cita.getMedico().getCedula() != null
                && cita.getMedico().getCedula().equals(seleccionado.getCedula())) {
            this.dispose();
            return;
        }

        // crear nueva cita con el mismo id, fecha, diagnóstico y paciente pero con el nuevo médico
        Cita nueva;
        nueva = new Cita(cita.getId(),fechaIngresada, cita.getDiagnostico(), seleccionado, cita.getPaciente());
        boolean ok = gestorCita.modificarCita(cita.getId(), nueva);
        if (ok) {
            JOptionPane.showMessageDialog(this, "Médico cambiado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            if (ownerLista != null) {
                ownerLista.refrescarTabla();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo cambiar el médico.", "Error", JOptionPane.ERROR_MESSAGE);
        }
         this.dispose();
    
    }//GEN-LAST:event_botonAplicarActionPerformed

    private void textoFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoFechaActionPerformed
           //nothig to do here        
    }//GEN-LAST:event_textoFechaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAplicar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JComboBox<Medico> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JTextField textoFecha;
    // End of variables declaration//GEN-END:variables
}
